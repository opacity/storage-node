basePath: '{{.BasePath}}'
definitions:
  models.Invoice:
    properties:
      cost:
        example: 1.56
        type: number
      ethAddress:
        example: a 42-char eth address with 0x prefix
        maxLength: 42
        minLength: 42
        type: string
    required:
    - cost
    - ethAddress
    type: object
  routes.UploadFileReq:
    properties:
      address:
        example: a 42-char eth address with 0x prefix
        maxLength: 42
        minLength: 42
        type: string
      requestBody:
        example: should produce routes.UploadFileObj, see description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          V: sig[0:63]
          R: sig[64:127]
          S: sig[128:129]
        example: a 130 character string created when you signed the request with your
          private key or account handle
        maxLength: 130
        minLength: 130
        type: string
    required:
    - address
    - requestBody
    - signature
    type: object
  routes.accountCreateReq:
    properties:
      requestBody:
        example: should produce routes.accountCreateObj, see description for example
        type: string
      signature:
        example: a 130 character string created when you signed the request with your
          private key or account handle
        maxLength: 130
        minLength: 130
        type: string
    required:
    - requestBody
    - signature
    type: object
  routes.accountCreateRes:
    properties:
      expirationDate:
        type: string
      invoice:
        $ref: '#/definitions/models.Invoice'
        type: object
    required:
    - expirationDate
    type: object
  routes.accountGetObj:
    properties:
      createdAt:
        type: string
      ethAddress:
        description: the eth address they will send payment to
        example: a 42-char eth address with 0x prefix
        maxLength: 42
        minLength: 42
        type: string
      expirationDate:
        type: string
      monthsInSubscription:
        description: number of months in their subscription
        example: 12
        type: integer
      storageLimit:
        description: how much storage they are allowed, in GB
        example: 100
        type: integer
      storageUsed:
        description: how much storage they have used, in GB
        example: 30
        type: number
      updatedAt:
        type: string
    required:
    - ethAddress
    - expirationDate
    - monthsInSubscription
    - storageLimit
    - storageUsed
    type: object
  routes.accountPaidRes:
    properties:
      account:
        $ref: '#/definitions/routes.accountGetObj'
        type: object
      paymentStatus:
        example: paid
        type: string
    type: object
  routes.deleteFileReq:
    properties:
      address:
        example: a 42-char eth address with 0x prefix
        maxLength: 42
        minLength: 42
        type: string
      requestBody:
        example: should produce routes.deleteFileObj, see description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          V: sig[0:63]
          R: sig[64:127]
          S: sig[128:129]
        example: a 130 character string created when you signed the request with your
          private key or account handle
        maxLength: 130
        minLength: 130
        type: string
    required:
    - address
    - requestBody
    - signature
    type: object
  routes.deleteFileRes:
    type: object
  routes.downloadFileReq:
    properties:
      address:
        example: a 42-char eth address with 0x prefix
        maxLength: 42
        minLength: 42
        type: string
      requestBody:
        example: should produce routes.downloadFileObj, see description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          V: sig[0:63]
          R: sig[64:127]
          S: sig[128:129]
        example: a 130 character string created when you signed the request with your
          private key or account handle
        maxLength: 130
        minLength: 130
        type: string
    required:
    - address
    - requestBody
    - signature
    type: object
  routes.downloadFileRes:
    properties:
      fileDownloadUrl:
        description: Url should point to S3, thus client does not need to download
          it from this node.
        example: a URL to use to download the file
        type: string
    type: object
  routes.getAccountDataReq:
    properties:
      address:
        example: a 42-char eth address with 0x prefix
        maxLength: 42
        minLength: 42
        type: string
      requestBody:
        example: should produce routes.accountGetReqObj, see description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          V: sig[0:63]
          R: sig[64:127]
          S: sig[128:129]
        example: a 130 character string created when you signed the request with your
          private key or account handle
        maxLength: 130
        minLength: 130
        type: string
    required:
    - address
    - requestBody
    - signature
    type: object
  routes.getMetadataReq:
    properties:
      address:
        example: a 42-char eth address with 0x prefix
        maxLength: 42
        minLength: 42
        type: string
      requestBody:
        example: should produce routes.getMetadataObject, see description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          V: sig[0:63]
          R: sig[64:127]
          S: sig[128:129]
        example: a 130 character string created when you signed the request with your
          private key or account handle
        maxLength: 130
        minLength: 130
        type: string
    required:
    - address
    - requestBody
    - signature
    type: object
  routes.getMetadataRes:
    properties:
      expirationDate:
        type: string
      metadata:
        example: your account metadata
        type: string
    required:
    - expirationDate
    type: object
  routes.updateMetadataReq:
    properties:
      address:
        example: a 42-char eth address with 0x prefix
        maxLength: 42
        minLength: 42
        type: string
      requestBody:
        example: should produce routes.updateMetadataObject, see description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          V: sig[0:63]
          R: sig[64:127]
          S: sig[128:129]
        example: a 130 character string created when you signed the request with your
          private key or account handle
        maxLength: 130
        minLength: 130
        type: string
    required:
    - address
    - requestBody
    - signature
    type: object
  routes.updateMetadataRes:
    properties:
      expirationDate:
        type: string
      metadata:
        example: your (updated) account metadata
        type: string
      metadataKey:
        example: a 64-char hex string created deterministically from your account
          handle or private key
        type: string
    required:
    - expirationDate
    - metadata
    - metadataKey
    type: object
  routes.uploadFileRes:
    properties:
      status:
        example: Chunk is uploaded
        type: string
    type: object
  routes.userStatsRes:
    properties:
      uploadedFileSizeInMb:
        type: number
      uploadedFilesCount:
        type: integer
      userAccountsCount:
        type: integer
    type: object
host: '{{.Host}}'
info:
  contact:
    name: Opacity Staff
    url: https://telegram.me/opacitystorage
  description: Opacity backend for file storage.
  license:
    name: GNU GENERAL PUBLIC LICENSE
  termsOfService: https://opacity.io/terms-of-service
  title: Storage Node
  version: "1.0"
paths:
  /admin/user_stats:
    get:
      consumes:
      - application/json
      description: get statistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.userStatsRes'
            type: object
      summary: get statistics
  /api/v1/accounts:
    get:
      consumes:
      - application/json
      description: |-
        check the payment status of an account
        requestBody should be a stringified version of (values are just examples):
        {
        "timestamp": 1557346389
        }
      parameters:
      - description: account payment status check object
        in: body
        name: getAccountDataReq
        required: true
        schema:
          $ref: '#/definitions/routes.getAccountDataReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.accountPaidRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "404":
          description: 'no account with that id: (with your accountID)'
          schema:
            type: string
      summary: check the payment status of an account
    post:
      consumes:
      - application/json
      description: |-
        create an account
        requestBody should be a stringified version of (values are just examples):
        {
        "storageLimit": 100,
        "durationInMonths": 12,
        "metadataKey": "a 64-char hex string created deterministically from your account handle or private key",
        }
      parameters:
      - description: account creation object
        in: body
        name: accountCreateReq
        required: true
        schema:
          $ref: '#/definitions/routes.accountCreateReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.accountCreateRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "503":
          description: 'error encrypting private key: (with the error)'
          schema:
            type: string
      summary: create an account
  /api/v1/download:
    get:
      consumes:
      - application/json
      description: |-
        download a file
        requestBody should be a stringified version of (values are just examples):
        {
        "fileID": "the handle of the file",
        }
      parameters:
      - description: download object
        in: body
        name: downloadFileReq
        required: true
        schema:
          $ref: '#/definitions/routes.downloadFileReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.downloadFileRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "404":
          description: such data does not exist
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: download a file
  /api/v1/file:
    delete:
      consumes:
      - application/json
      description: |-
        delete a file
        requestBody should be a stringified version of (values are just examples):
        {
        "fileID": "the handle of the file",
        }
      parameters:
      - description: file deletion object
        in: body
        name: deleteFileReq
        required: true
        schema:
          $ref: '#/definitions/routes.deleteFileReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.deleteFileRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: delete a file
  /api/v1/metadata:
    get:
      consumes:
      - application/json
      description: |-
        requestBody should be a stringified version of (values are just examples):
        {
        "metadataKey": "a 64-char hex string created deterministically from your account handle or private key",
        "timestamp": 1557346389
        }
      parameters:
      - description: get metadata object
        in: body
        name: getMetadataReq
        required: true
        schema:
          $ref: '#/definitions/routes.getMetadataReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.getMetadataRes'
            type: object
        "404":
          description: no value found for that key
          schema:
            type: string
      summary: Retrieve account metadata
    post:
      consumes:
      - application/json
      description: |-
        requestBody should be a stringified version of (values are just examples):
        {
        "metadataKey": "a 64-char hex string created deterministically from your account handle or private key",
        "metadata": "your (updated) account metadata",
        "timestamp": 1557346389
        }
      parameters:
      - description: update metadata object
        in: body
        name: updateMetadataReq
        required: true
        schema:
          $ref: '#/definitions/routes.updateMetadataReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.updateMetadataRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "403":
          description: subscription expired
          schema:
            type: string
        "404":
          description: no value found for that key
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: Update metadata
  /api/v1/upload:
    post:
      consumes:
      - multipart/form-data
      description: |-
        upload a chunk of a file. The first partIndex must be 1. The endIndex must be greater than or equal to partIndex.
        requestBody should be a stringified version of (values are just examples):
        {
        "chunkData": "a binary string of the chunk data",
        "fileHandle": "a deterministically created file handle",
        "partIndex": 1,
        "endIndex": 2
        }
      parameters:
      - description: an object to upload a chunk of a file
        in: body
        name: UploadFileReq
        required: true
        schema:
          $ref: '#/definitions/routes.UploadFileReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.uploadFileRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/routes.accountCreateRes'
            type: object
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: upload a chunk of a file
swagger: "2.0"
