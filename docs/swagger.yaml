basePath: '{{.BasePath}}'
definitions:
  models.Invoice:
    properties:
      cost:
        example: 1.56
        type: number
      ethAddress:
        example: a 42-char eth address with 0x prefix
        maxLength: 42
        minLength: 42
        type: string
    required:
    - ethAddress
    type: object
  routes.InitFileUploadObj:
    properties:
      endIndex:
        example: 2
        type: integer
      fileHandle:
        example: a deterministically created file handle
        maxLength: 64
        minLength: 64
        type: string
      fileSizeInByte:
        example: 200000000000006
        type: integer
    required:
    - endIndex
    - fileHandle
    - fileSizeInByte
    type: object
  routes.InitFileUploadReq:
    properties:
      initFileUploadObj:
        $ref: '#/definitions/routes.InitFileUploadObj'
        type: object
      metadata:
        example: the metadata of the file you are about to upload, as an array of
          bytes
        type: string
      metadataAsFile:
        type: string
      publicKey:
        example: a 66-character public key
        maxLength: 66
        minLength: 66
        type: string
      requestBody:
        example: look at description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          R: sig[0:63]
          S: sig[64:127]
        example: a 128 character string created when you signed the request with your
          private key or account handle
        maxLength: 128
        minLength: 128
        type: string
    required:
    - metadata
    - publicKey
    - requestBody
    - signature
    type: object
  routes.PlanResponse:
    type: object
  routes.StatusRes:
    properties:
      status:
        example: status of the request
        type: string
    type: object
  routes.UploadFileObj:
    properties:
      fileHandle:
        example: a deterministically created file handle
        maxLength: 64
        minLength: 64
        type: string
      partIndex:
        example: 1
        type: integer
    required:
    - fileHandle
    - partIndex
    type: object
  routes.UploadFileReq:
    properties:
      chunkData:
        example: a binary string of the chunk data
        type: string
      publicKey:
        example: a 66-character public key
        maxLength: 66
        minLength: 66
        type: string
      requestBody:
        example: look at description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          R: sig[0:63]
          S: sig[64:127]
        example: a 128 character string created when you signed the request with your
          private key or account handle
        maxLength: 128
        minLength: 128
        type: string
      uploadFileObj:
        $ref: '#/definitions/routes.UploadFileObj'
        type: object
    required:
    - chunkData
    - publicKey
    - requestBody
    - signature
    type: object
  routes.UploadStatusObj:
    properties:
      fileHandle:
        example: a deterministically created file handle
        maxLength: 64
        minLength: 64
        type: string
    required:
    - fileHandle
    type: object
  routes.UploadStatusReq:
    properties:
      publicKey:
        example: a 66-character public key
        maxLength: 66
        minLength: 66
        type: string
      requestBody:
        example: look at description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          R: sig[0:63]
          S: sig[64:127]
        example: a 128 character string created when you signed the request with your
          private key or account handle
        maxLength: 128
        minLength: 128
        type: string
      uploadStatusObj:
        $ref: '#/definitions/routes.UploadStatusObj'
        type: object
    required:
    - publicKey
    - requestBody
    - signature
    type: object
  routes.accountCreateObj:
    properties:
      durationInMonths:
        example: 12
        minimum: 1
        type: integer
      storageLimit:
        example: 100
        maximum: 2048
        minimum: 10
        type: integer
    required:
    - durationInMonths
    - storageLimit
    type: object
  routes.accountCreateReq:
    properties:
      accountCreateObj:
        $ref: '#/definitions/routes.accountCreateObj'
        type: object
      publicKey:
        example: a 66-character public key
        maxLength: 66
        minLength: 66
        type: string
      requestBody:
        example: look at description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          R: sig[0:63]
          S: sig[64:127]
        example: a 128 character string created when you signed the request with your
          private key or account handle
        maxLength: 128
        minLength: 128
        type: string
    required:
    - publicKey
    - requestBody
    - signature
    type: object
  routes.accountCreateRes:
    properties:
      expirationDate:
        type: string
      invoice:
        $ref: '#/definitions/models.Invoice'
        type: object
    required:
    - expirationDate
    type: object
  routes.accountDataRes:
    properties:
      account:
        $ref: '#/definitions/routes.accountGetObj'
        type: object
      paymentStatus:
        example: paid
        type: string
      stripeData:
        $ref: '#/definitions/routes.stripeDataObj'
        type: object
    type: object
  routes.accountGetObj:
    properties:
      apiVersion:
        type: integer
      cost:
        example: 2
        type: number
      createdAt:
        type: string
      ethAddress:
        description: the eth address they will send payment to
        example: a 42-char eth address with 0x prefix
        maxLength: 42
        minLength: 42
        type: string
      expirationDate:
        type: string
      maxFolders:
        example: 2000
        type: integer
      maxMetadataSizeInMB:
        example: 200
        type: integer
      monthsInSubscription:
        description: number of months in their subscription
        example: 12
        type: integer
      storageLimit:
        description: how much storage they are allowed, in GB
        example: 100
        type: integer
      storageUsed:
        description: how much storage they have used, in GB
        example: 30
        type: number
      totalFolders:
        example: 2
        type: integer
      totalMetadataSizeInMB:
        example: 1.245765432
        type: number
      updatedAt:
        type: string
    required:
    - apiVersion
    - ethAddress
    - expirationDate
    - monthsInSubscription
    - storageLimit
    type: object
  routes.accountGetReqObj:
    properties:
      timestamp:
        type: integer
    required:
    - timestamp
    type: object
  routes.accountUnpaidRes:
    properties:
      account:
        $ref: '#/definitions/routes.accountGetObj'
        type: object
      invoice:
        $ref: '#/definitions/models.Invoice'
        type: object
      paymentStatus:
        example: paid
        type: string
      stripeData:
        $ref: '#/definitions/routes.stripeDataObj'
        type: object
    type: object
  routes.checkUpgradeStatusObject:
    properties:
      durationInMonths:
        example: 12
        minimum: 1
        type: integer
      fileHandles:
        example:
        - an array containing all your file handles
        items:
          type: string
        type: array
      metadataKeys:
        example:
        - an array containing all your metadata keys
        items:
          type: string
        type: array
      storageLimit:
        example: 128
        minimum: 128
        type: integer
    required:
    - durationInMonths
    - fileHandles
    - metadataKeys
    - storageLimit
    type: object
  routes.checkUpgradeStatusReq:
    properties:
      checkUpgradeStatusObject:
        $ref: '#/definitions/routes.checkUpgradeStatusObject'
        type: object
      publicKey:
        example: a 66-character public key
        maxLength: 66
        minLength: 66
        type: string
      requestBody:
        example: look at description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          R: sig[0:63]
          S: sig[64:127]
        example: a 128 character string created when you signed the request with your
          private key or account handle
        maxLength: 128
        minLength: 128
        type: string
    required:
    - publicKey
    - requestBody
    - signature
    type: object
  routes.createMetadataRes:
    properties:
      expirationDate:
        type: string
    required:
    - expirationDate
    type: object
  routes.createStripePaymentObject:
    properties:
      durationInMonths:
        example: 12
        minimum: 1
        type: integer
      storageLimit:
        example: 128
        minimum: 128
        type: integer
      stripeToken:
        example: tok_KPte7942xySKBKyrBu11yEpf
        type: string
      timestamp:
        type: integer
      upgradeAccount:
        type: boolean
    required:
    - stripeToken
    - timestamp
    type: object
  routes.createStripePaymentReq:
    properties:
      createStripePaymentObject:
        $ref: '#/definitions/routes.createStripePaymentObject'
        type: object
      publicKey:
        example: a 66-character public key
        maxLength: 66
        minLength: 66
        type: string
      requestBody:
        example: look at description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          R: sig[0:63]
          S: sig[64:127]
        example: a 128 character string created when you signed the request with your
          private key or account handle
        maxLength: 128
        minLength: 128
        type: string
    required:
    - publicKey
    - requestBody
    - signature
    type: object
  routes.deleteFileObj:
    properties:
      fileID:
        example: the handle of the file
        type: string
    required:
    - fileID
    type: object
  routes.deleteFileReq:
    properties:
      deleteFileObj:
        $ref: '#/definitions/routes.deleteFileObj'
        type: object
      publicKey:
        example: a 66-character public key
        maxLength: 66
        minLength: 66
        type: string
      requestBody:
        example: look at description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          R: sig[0:63]
          S: sig[64:127]
        example: a 128 character string created when you signed the request with your
          private key or account handle
        maxLength: 128
        minLength: 128
        type: string
    required:
    - publicKey
    - requestBody
    - signature
    type: object
  routes.deleteFileRes:
    type: object
  routes.downloadFileObj:
    properties:
      fileID:
        example: the handle of the file
        type: string
    required:
    - fileID
    type: object
  routes.downloadFileRes:
    properties:
      fileDownloadUrl:
        description: Url should point to S3, thus client does not need to download
          it from this node.
        example: a URL to use to download the file
        type: string
    type: object
  routes.getAccountDataReq:
    properties:
      accountGetReqObj:
        $ref: '#/definitions/routes.accountGetReqObj'
        type: object
      publicKey:
        example: a 66-character public key
        maxLength: 66
        minLength: 66
        type: string
      requestBody:
        example: look at description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          R: sig[0:63]
          S: sig[64:127]
        example: a 128 character string created when you signed the request with your
          private key or account handle
        maxLength: 128
        minLength: 128
        type: string
    required:
    - publicKey
    - requestBody
    - signature
    type: object
  routes.getMetadataHistoryRes:
    properties:
      expirationDate:
        type: string
      metadata:
        example: your account metadata
        type: string
      metadataHistory:
        example:
        - your account metadata
        items:
          type: string
        type: array
    required:
    - expirationDate
    type: object
  routes.getMetadataRes:
    properties:
      expirationDate:
        type: string
      metadata:
        example: your account metadata
        type: string
    required:
    - expirationDate
    type: object
  routes.getUpgradeAccountInvoiceObject:
    properties:
      durationInMonths:
        example: 12
        minimum: 1
        type: integer
      storageLimit:
        example: 128
        minimum: 128
        type: integer
    required:
    - durationInMonths
    - storageLimit
    type: object
  routes.getUpgradeAccountInvoiceReq:
    properties:
      getUpgradeAccountInvoiceObject:
        $ref: '#/definitions/routes.getUpgradeAccountInvoiceObject'
        type: object
      publicKey:
        example: a 66-character public key
        maxLength: 66
        minLength: 66
        type: string
      requestBody:
        example: look at description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          R: sig[0:63]
          S: sig[64:127]
        example: a 128 character string created when you signed the request with your
          private key or account handle
        maxLength: 128
        minLength: 128
        type: string
    required:
    - publicKey
    - requestBody
    - signature
    type: object
  routes.getUpgradeAccountInvoiceRes:
    properties:
      opqInvoice:
        $ref: '#/definitions/models.Invoice'
        type: object
      usdInvoice:
        type: number
    type: object
  routes.metadataKeyObject:
    properties:
      metadataKey:
        example: a 64-char hex string created deterministically, will be a key for
          the metadata of one of your folders
        type: string
      timestamp:
        type: integer
    required:
    - metadataKey
    - timestamp
    type: object
  routes.metadataKeyReq:
    properties:
      metadataKeyObject:
        $ref: '#/definitions/routes.metadataKeyObject'
        type: object
      publicKey:
        example: a 66-character public key
        maxLength: 66
        minLength: 66
        type: string
      requestBody:
        example: look at description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          R: sig[0:63]
          S: sig[64:127]
        example: a 128 character string created when you signed the request with your
          private key or account handle
        maxLength: 128
        minLength: 128
        type: string
    required:
    - publicKey
    - requestBody
    - signature
    type: object
  routes.stripeDataObj:
    properties:
      amount:
        type: number
      chargeID:
        type: string
      chargePaid:
        type: boolean
      opqTxStatus:
        type: string
      stripePaymentExists:
        type: boolean
      stripeToken:
        type: string
    type: object
  routes.stripeDataRes:
    properties:
      amount:
        type: number
      chargeID:
        type: string
      chargePaid:
        type: boolean
      opqTxStatus:
        type: string
      status:
        example: status of the request
        type: string
      stripePaymentExists:
        type: boolean
      stripeToken:
        type: string
    type: object
  routes.updateMetadataObject:
    properties:
      metadata:
        example: your (updated) account metadata
        type: string
      metadataKey:
        example: a 64-char hex string created deterministically, will be a key for
          the metadata of one of your folders
        type: string
      timestamp:
        type: integer
    required:
    - metadata
    - metadataKey
    - timestamp
    type: object
  routes.updateMetadataReq:
    properties:
      publicKey:
        example: a 66-character public key
        maxLength: 66
        minLength: 66
        type: string
      requestBody:
        example: look at description for example
        type: string
      signature:
        description: |-
          signature without 0x prefix is broken into
          R: sig[0:63]
          S: sig[64:127]
        example: a 128 character string created when you signed the request with your
          private key or account handle
        maxLength: 128
        minLength: 128
        type: string
      updateMetadataObject:
        $ref: '#/definitions/routes.updateMetadataObject'
        type: object
    required:
    - publicKey
    - requestBody
    - signature
    type: object
  routes.updateMetadataRes:
    properties:
      expirationDate:
        type: string
      metadata:
        example: your (updated) account metadata
        type: string
      metadataKey:
        example: a 64-char hex string created deterministically, will be a key for
          the metadata of one of your folders
        type: string
    required:
    - expirationDate
    - metadata
    - metadataKey
    type: object
  utils.PlanInfo:
    properties:
      cost:
        type: number
      costInUSD:
        type: number
      maxFolders:
        type: integer
      maxMetadataSizeInMB:
        type: integer
      name:
        type: string
      storageInGB:
        type: integer
    required:
    - cost
    - costInUSD
    - maxFolders
    - maxMetadataSizeInMB
    - name
    - storageInGB
    type: object
  utils.PlanResponseType:
    additionalProperties:
      properties:
        cost:
          type: number
        costInUSD:
          type: number
        maxFolders:
          type: integer
        maxMetadataSizeInMB:
          type: integer
        name:
          type: string
        storageInGB:
          type: integer
      required:
      - cost
      - costInUSD
      - maxFolders
      - maxMetadataSizeInMB
      - name
      - storageInGB
      type: object
    type: object
host: '{{.Host}}'
info:
  contact: {}
  description: '{{.Description}}'
  license: {}
  title: '{{.Title}}'
  version: '{{.Version}}'
paths:
  /api/v1/account-data:
    post:
      consumes:
      - application/json
      description: |-
        check the payment status of an account
        requestBody should be a stringified version of (values are just examples):
        {
        "timestamp": 1557346389
        }
      parameters:
      - description: account payment status check object
        in: body
        name: getAccountDataReq
        required: true
        schema:
          $ref: '#/definitions/routes.getAccountDataReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.accountUnpaidRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "404":
          description: 'no account with that id: (with your accountID)'
          schema:
            type: string
      summary: check the payment status of an account
  /api/v1/accounts:
    post:
      consumes:
      - application/json
      description: |-
        create an account
        requestBody should be a stringified version of (values are just examples):
        {
        "storageLimit": 100,
        "durationInMonths": 12,
        }
      parameters:
      - description: account creation object
        in: body
        name: accountCreateReq
        required: true
        schema:
          $ref: '#/definitions/routes.accountCreateReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.accountCreateRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "503":
          description: 'error encrypting private key: (with the error)'
          schema:
            type: string
      summary: create an account
  /api/v1/delete:
    post:
      consumes:
      - application/json
      description: |-
        delete a file
        requestBody should be a stringified version of (values are just examples):
        {
        "fileID": "the handle of the file",
        }
      parameters:
      - description: file deletion object
        in: body
        name: deleteFileReq
        required: true
        schema:
          $ref: '#/definitions/routes.deleteFileReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.deleteFileRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: delete a file
  /api/v1/download:
    post:
      consumes:
      - application/json
      description: download a file without cryptographic verification
      parameters:
      - description: download object for non-signed requests
        in: body
        name: downloadFileObj
        required: true
        schema:
          $ref: '#/definitions/routes.downloadFileObj'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.downloadFileRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "404":
          description: such data does not exist
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: download a file without cryptographic verification
  /api/v1/init-upload:
    post:
      consumes:
      - multipart/form-data
      description: |-
        start an upload
        requestBody should be a stringified version of (values are just examples):
        {
        "fileHandle": "a deterministically created file handle",
        "fileSizeInByte": "200000000000006",
        "endIndex": 2
        }
      parameters:
      - description: an object to start a file upload
        in: body
        name: InitFileUploadReq
        required: true
        schema:
          $ref: '#/definitions/routes.InitFileUploadReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.StatusRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "403":
          description: signature did not match
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: start an upload
  /api/v1/metadata/create:
    post:
      consumes:
      - application/json
      description: |-
        requestBody should be a stringified version of (values are just examples):
        {
        "metadataKey": "a 64-char hex string created deterministically, will be a key for the metadata of one of your folders",
        "timestamp": 1557346389
        }
      parameters:
      - description: object for endpoints that only need metadataKey and timestamp
        in: body
        name: metadataKeyReq
        required: true
        schema:
          $ref: '#/definitions/routes.metadataKeyReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.createMetadataRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "403":
          description: subscription expired, or the invoice resonse
          schema:
            type: string
        "404":
          description: account not found
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: create a new metadata
  /api/v1/metadata/delete:
    post:
      consumes:
      - application/json
      description: |-
        requestBody should be a stringified version of (values are just examples):
        {
        "metadataKey": "a 64-char hex string created deterministically, will be a key for the metadata of one of your folders",
        "timestamp": 1557346389
        }
      parameters:
      - description: object for endpoints that only need metadataKey and timestamp
        in: body
        name: metadataKeyReq
        required: true
        schema:
          $ref: '#/definitions/routes.metadataKeyReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.StatusRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "403":
          description: subscription expired, or the invoice resonse
          schema:
            type: string
        "404":
          description: account not found
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: delete a metadata
  /api/v1/metadata/get:
    post:
      consumes:
      - application/json
      description: |-
        requestBody should be a stringified version of (values are just examples):
        {
        "metadataKey": "a 64-char hex string created deterministically, will be a key for the metadata of one of your folders",
        "timestamp": 1557346389
        }
      parameters:
      - description: object for endpoints that only need metadataKey and timestamp
        in: body
        name: metadataKeyReq
        required: true
        schema:
          $ref: '#/definitions/routes.metadataKeyReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.getMetadataRes'
            type: object
        "403":
          description: subscription expired, or the invoice resonse
          schema:
            type: string
        "404":
          description: no value found for that key, or account not found
          schema:
            type: string
      summary: Retrieve account metadata
  /api/v1/metadata/history:
    post:
      consumes:
      - application/json
      description: |-
        requestBody should be a stringified version of (values are just examples):
        {
        "metadataKey": "a 64-char hex string created deterministically, will be a key for the metadata of one of your folders",
        "timestamp": 1557346389
        }
      parameters:
      - description: object for endpoints that only need metadataKey and timestamp
        in: body
        name: metadataKeyReq
        required: true
        schema:
          $ref: '#/definitions/routes.metadataKeyReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.getMetadataHistoryRes'
            type: object
        "403":
          description: subscription expired, or the invoice resonse
          schema:
            type: string
        "404":
          description: no value found for that key, or account not found
          schema:
            type: string
      summary: Retrieve metadata history
  /api/v1/metadata/set:
    post:
      consumes:
      - application/json
      description: |-
        requestBody should be a stringified version of (values are just examples):
        {
        "metadataKey": "a 64-char hex string created deterministically, will be a key for the metadata of one of your folders",
        "metadata": "your (updated) account metadata",
        "timestamp": 1557346389
        }
      parameters:
      - description: update metadata object
        in: body
        name: updateMetadataReq
        required: true
        schema:
          $ref: '#/definitions/routes.updateMetadataReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.updateMetadataRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "403":
          description: subscription expired, or the invoice response
          schema:
            type: string
        "404":
          description: no value found for that key, or account not found
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: Update metadata
  /api/v1/stripe/create:
    post:
      consumes:
      - application/json
      description: |-
        create a stripe payment
        requestBody should be a stringified version of (values are just examples):
        {
        "stripeToken": "tok_KPte7942xySKBKyrBu11yEpf",
        }
      parameters:
      - description: stripe payment creation object
        in: body
        name: createStripePaymentReq
        required: true
        schema:
          $ref: '#/definitions/routes.createStripePaymentReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.stripeDataRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "403":
          description: account is already paid for
          schema:
            type: string
        "404":
          description: 'no account with that id: (with your accountID)'
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: create a stripe payment
  /api/v1/upgrade:
    post:
      consumes:
      - application/json
      description: |-
        check the upgrade status
        requestBody should be a stringified version of (values are just examples):
        {
        "storageLimit": 100,
        "durationInMonths": 12,
        "metadataKeys": "["someKey", "someOtherKey]",
        "fileHandles": "["someHandle", "someOtherHandle]",
        }
      parameters:
      - description: check upgrade status object
        in: body
        name: checkUpgradeStatusReq
        required: true
        schema:
          $ref: '#/definitions/routes.checkUpgradeStatusReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.StatusRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "404":
          description: 'no account with that id: (with your accountID)'
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: check the upgrade status
  /api/v1/upgrade/invoice:
    post:
      consumes:
      - application/json
      description: |-
        get an invoice to upgrade an account
        requestBody should be a stringified version of (values are just examples):
        {
        "storageLimit": 100,
        "durationInMonths": 12,
        }
      parameters:
      - description: get upgrade invoice object
        in: body
        name: getUpgradeAccountInvoiceReq
        required: true
        schema:
          $ref: '#/definitions/routes.getUpgradeAccountInvoiceReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.getUpgradeAccountInvoiceRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "404":
          description: 'no account with that id: (with your accountID)'
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: get an invoice to upgrade an account
  /api/v1/upload:
    post:
      consumes:
      - multipart/form-data
      description: |-
        upload a chunk of a file. The first partIndex must be 1.
        requestBody should be a stringified version of (values are just examples):
        {
        "fileHandle": "a deterministically created file handle",
        "partIndex": 1,
        }
      parameters:
      - description: an object to upload a chunk of a file
        in: body
        name: UploadFileReq
        required: true
        schema:
          $ref: '#/definitions/routes.UploadFileReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.StatusRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/routes.accountCreateRes'
            type: object
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: upload a chunk of a file
  /api/v1/upload-status:
    post:
      consumes:
      - application/json
      description: |-
        check status of an upload
        requestBody should be a stringified version of (values are just examples):
        {
        "fileHandle": "a deterministically created file handle",
        }
      parameters:
      - description: an object to poll upload status
        in: body
        name: UploadStatusReq
        required: true
        schema:
          $ref: '#/definitions/routes.UploadStatusReq'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.StatusRes'
            type: object
        "400":
          description: 'bad request, unable to parse request body: (with the error)'
          schema:
            type: string
        "403":
          description: signature did not match
          schema:
            type: string
        "404":
          description: file or account not found
          schema:
            type: string
        "500":
          description: some information about the internal error
          schema:
            type: string
      summary: check status of an upload
  /plans:
    get:
      consumes:
      - application/json
      description: get the plans we sell
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.PlanResponse'
            type: object
      summary: get the plans we sell
swagger: "2.0"
