// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-07-26 14:02:52.735914 -0400 EDT m=+0.517982301

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/account-data": {
            "post": {
                "description": "check the payment status of an account\nrequestBody should be a stringified version of (values are just examples):\n{\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "check the payment status of an account",
                "parameters": [
                    {
                        "description": "account payment status check object",
                        "name": "getAccountDataReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.getAccountDataReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.accountUnpaidRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/accounts": {
            "post": {
                "description": "create an account\nrequestBody should be a stringified version of (values are just examples):\n{\n\"storageLimit\": 100,\n\"durationInMonths\": 12,\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "create an account",
                "parameters": [
                    {
                        "description": "account creation object",
                        "name": "accountCreateReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.accountCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.accountCreateRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "error encrypting private key: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/delete": {
            "post": {
                "description": "delete a file\nrequestBody should be a stringified version of (values are just examples):\n{\n\"fileID\": \"the handle of the file\",\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "delete a file",
                "parameters": [
                    {
                        "description": "file deletion object",
                        "name": "deleteFileReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.deleteFileReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.deleteFileRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/download": {
            "post": {
                "description": "download a file without cryptographic verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "download a file without cryptographic verification",
                "parameters": [
                    {
                        "description": "download object for non-signed requests",
                        "name": "downloadFileObj",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.downloadFileObj"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.downloadFileRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "such data does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/init-upload": {
            "post": {
                "description": "start an upload\nrequestBody should be a stringified version of (values are just examples):\n{\n\"fileHandle\": \"a deterministically created file handle\",\n\"fileSizeInByte\": \"200000000000006\",\n\"endIndex\": 2\n}",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "start an upload",
                "parameters": [
                    {
                        "description": "an object to start a file upload",
                        "name": "InitFileUploadReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.InitFileUploadReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "signature did not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/metadata/create": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataKey\": \"a 64-char hex string created deterministically, will be a key for the metadata of one of your folders\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "create a new metadata",
                "parameters": [
                    {
                        "description": "object for endpoints that only need metadataKey and timestamp",
                        "name": "metadataKeyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.metadataKeyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.createMetadataRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice resonse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/metadata/delete": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataKey\": \"a 64-char hex string created deterministically, will be a key for the metadata of one of your folders\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "delete a metadata",
                "parameters": [
                    {
                        "description": "object for endpoints that only need metadataKey and timestamp",
                        "name": "metadataKeyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.metadataKeyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice resonse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/metadata/get": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataKey\": \"a 64-char hex string created deterministically, will be a key for the metadata of one of your folders\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve account metadata",
                "parameters": [
                    {
                        "description": "object for endpoints that only need metadataKey and timestamp",
                        "name": "metadataKeyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.metadataKeyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.getMetadataRes"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice resonse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no value found for that key, or account not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/metadata/history": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataKey\": \"a 64-char hex string created deterministically, will be a key for the metadata of one of your folders\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve metadata history",
                "parameters": [
                    {
                        "description": "object for endpoints that only need metadataKey and timestamp",
                        "name": "metadataKeyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.metadataKeyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.getMetadataHistoryRes"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice resonse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no value found for that key, or account not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/metadata/set": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataKey\": \"a 64-char hex string created deterministically, will be a key for the metadata of one of your folders\",\n\"metadata\": \"your (updated) account metadata\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update metadata",
                "parameters": [
                    {
                        "description": "update metadata object",
                        "name": "updateMetadataReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.updateMetadataReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.updateMetadataRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no value found for that key, or account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/stripe/create": {
            "post": {
                "description": "create a stripe payment\nrequestBody should be a stringified version of (values are just examples):\n{\n\"stripeToken\": \"tok_KPte7942xySKBKyrBu11yEpf\",\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "create a stripe payment",
                "parameters": [
                    {
                        "description": "stripe payment creation object",
                        "name": "createStripePaymentReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.createStripePaymentReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.stripeDataRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "account is already paid for",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/upload": {
            "post": {
                "description": "upload a chunk of a file. The first partIndex must be 1.\nrequestBody should be a stringified version of (values are just examples):\n{\n\"fileHandle\": \"a deterministically created file handle\",\n\"partIndex\": 1,\n}",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "upload a chunk of a file",
                "parameters": [
                    {
                        "description": "an object to upload a chunk of a file",
                        "name": "UploadFileReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.UploadFileReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.accountCreateRes"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/upload-status": {
            "post": {
                "description": "check status of an upload\nrequestBody should be a stringified version of (values are just examples):\n{\n\"fileHandle\": \"a deterministically created file handle\",\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "check status of an upload",
                "parameters": [
                    {
                        "description": "an object to poll upload status",
                        "name": "UploadStatusReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.UploadStatusReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "signature did not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "file or account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/plans": {
            "get": {
                "description": "get the plans we sell",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "get the plans we sell",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/routes.PlanResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Invoice": {
            "type": "object",
            "required": [
                "cost",
                "ethAddress"
            ],
            "properties": {
                "cost": {
                    "type": "number",
                    "example": 1.56
                },
                "ethAddress": {
                    "type": "string",
                    "maxLength": 42,
                    "minLength": 42,
                    "example": "a 42-char eth address with 0x prefix"
                }
            }
        },
        "routes.InitFileUploadObj": {
            "type": "object",
            "required": [
                "endIndex",
                "fileHandle",
                "fileSizeInByte"
            ],
            "properties": {
                "endIndex": {
                    "type": "integer",
                    "example": 2
                },
                "fileHandle": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 64,
                    "example": "a deterministically created file handle"
                },
                "fileSizeInByte": {
                    "type": "integer",
                    "example": 200000000000006
                }
            }
        },
        "routes.InitFileUploadReq": {
            "type": "object",
            "required": [
                "metadata",
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "initFileUploadObj": {
                    "type": "object",
                    "$ref": "#/definitions/routes.InitFileUploadObj"
                },
                "metadata": {
                    "type": "string",
                    "example": "the metadata of the file you are about to upload, as an array of bytes"
                },
                "metadataAsFile": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.PlanResponse": {
            "type": "object"
        },
        "routes.StatusRes": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "status of the request"
                }
            }
        },
        "routes.UploadFileObj": {
            "type": "object",
            "required": [
                "fileHandle",
                "partIndex"
            ],
            "properties": {
                "fileHandle": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 64,
                    "example": "a deterministically created file handle"
                },
                "partIndex": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "routes.UploadFileReq": {
            "type": "object",
            "required": [
                "chunkData",
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "chunkData": {
                    "type": "string",
                    "example": "a binary string of the chunk data"
                },
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                },
                "uploadFileObj": {
                    "type": "object",
                    "$ref": "#/definitions/routes.UploadFileObj"
                }
            }
        },
        "routes.UploadStatusObj": {
            "type": "object",
            "required": [
                "fileHandle"
            ],
            "properties": {
                "fileHandle": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 64,
                    "example": "a deterministically created file handle"
                }
            }
        },
        "routes.UploadStatusReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                },
                "uploadStatusObj": {
                    "type": "object",
                    "$ref": "#/definitions/routes.UploadStatusObj"
                }
            }
        },
        "routes.accountCreateObj": {
            "type": "object",
            "required": [
                "durationInMonths",
                "storageLimit"
            ],
            "properties": {
                "durationInMonths": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 12
                },
                "storageLimit": {
                    "type": "integer",
                    "maximum": 2048,
                    "minimum": 10,
                    "example": 100
                }
            }
        },
        "routes.accountCreateReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "accountCreateObj": {
                    "type": "object",
                    "$ref": "#/definitions/routes.accountCreateObj"
                },
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.accountCreateRes": {
            "type": "object",
            "required": [
                "expirationDate"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "invoice": {
                    "type": "object",
                    "$ref": "#/definitions/models.Invoice"
                }
            }
        },
        "routes.accountDataRes": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "object",
                    "$ref": "#/definitions/routes.accountGetObj"
                },
                "paymentStatus": {
                    "type": "string",
                    "example": "paid"
                },
                "stripeData": {
                    "type": "object",
                    "$ref": "#/definitions/routes.stripeDataObj"
                }
            }
        },
        "routes.accountGetObj": {
            "type": "object",
            "required": [
                "apiVersion",
                "cost",
                "ethAddress",
                "expirationDate",
                "monthsInSubscription",
                "storageLimit"
            ],
            "properties": {
                "apiVersion": {
                    "type": "integer"
                },
                "cost": {
                    "type": "number",
                    "example": 2
                },
                "createdAt": {
                    "type": "string"
                },
                "ethAddress": {
                    "description": "the eth address they will send payment to",
                    "type": "string",
                    "maxLength": 42,
                    "minLength": 42,
                    "example": "a 42-char eth address with 0x prefix"
                },
                "expirationDate": {
                    "type": "string"
                },
                "maxFolders": {
                    "type": "integer",
                    "example": 2000
                },
                "maxMetadataSizeInMB": {
                    "type": "integer",
                    "example": 200
                },
                "monthsInSubscription": {
                    "description": "number of months in their subscription",
                    "type": "integer",
                    "example": 12
                },
                "storageLimit": {
                    "description": "how much storage they are allowed, in GB",
                    "type": "integer",
                    "example": 100
                },
                "storageUsed": {
                    "description": "how much storage they have used, in GB",
                    "type": "number",
                    "example": 30
                },
                "totalFolders": {
                    "type": "integer",
                    "example": 2
                },
                "totalMetadataSizeInMB": {
                    "type": "number",
                    "example": 1.245765432
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "routes.accountGetReqObj": {
            "type": "object",
            "required": [
                "timestamp"
            ],
            "properties": {
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "routes.accountUnpaidRes": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "object",
                    "$ref": "#/definitions/routes.accountGetObj"
                },
                "invoice": {
                    "type": "object",
                    "$ref": "#/definitions/models.Invoice"
                },
                "paymentStatus": {
                    "type": "string",
                    "example": "paid"
                },
                "stripeData": {
                    "type": "object",
                    "$ref": "#/definitions/routes.stripeDataObj"
                }
            }
        },
        "routes.createMetadataRes": {
            "type": "object",
            "required": [
                "expirationDate"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                }
            }
        },
        "routes.createStripePaymentObject": {
            "type": "object",
            "required": [
                "stripeToken",
                "timestamp"
            ],
            "properties": {
                "stripeToken": {
                    "type": "string",
                    "example": "tok_KPte7942xySKBKyrBu11yEpf"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "routes.createStripePaymentReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "createStripePaymentObject": {
                    "type": "object",
                    "$ref": "#/definitions/routes.createStripePaymentObject"
                },
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.deleteFileObj": {
            "type": "object",
            "required": [
                "fileID"
            ],
            "properties": {
                "fileID": {
                    "type": "string",
                    "example": "the handle of the file"
                }
            }
        },
        "routes.deleteFileReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "deleteFileObj": {
                    "type": "object",
                    "$ref": "#/definitions/routes.deleteFileObj"
                },
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.deleteFileRes": {
            "type": "object"
        },
        "routes.downloadFileObj": {
            "type": "object",
            "required": [
                "fileID"
            ],
            "properties": {
                "fileID": {
                    "type": "string",
                    "example": "the handle of the file"
                }
            }
        },
        "routes.downloadFileRes": {
            "type": "object",
            "properties": {
                "fileDownloadUrl": {
                    "description": "Url should point to S3, thus client does not need to download it from this node.",
                    "type": "string",
                    "example": "a URL to use to download the file"
                }
            }
        },
        "routes.getAccountDataReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "accountGetReqObj": {
                    "type": "object",
                    "$ref": "#/definitions/routes.accountGetReqObj"
                },
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.getMetadataHistoryRes": {
            "type": "object",
            "required": [
                "expirationDate"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string",
                    "example": "your account metadata"
                },
                "metadataHistory": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "your account metadata"
                    ]
                }
            }
        },
        "routes.getMetadataRes": {
            "type": "object",
            "required": [
                "expirationDate"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string",
                    "example": "your account metadata"
                }
            }
        },
        "routes.metadataKeyObject": {
            "type": "object",
            "required": [
                "metadataKey",
                "timestamp"
            ],
            "properties": {
                "metadataKey": {
                    "type": "string",
                    "example": "a 64-char hex string created deterministically, will be a key for the metadata of one of your folders"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "routes.metadataKeyReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "metadataKeyObject": {
                    "type": "object",
                    "$ref": "#/definitions/routes.metadataKeyObject"
                },
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.stripeDataObj": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "chargeID": {
                    "type": "string"
                },
                "chargePaid": {
                    "type": "boolean"
                },
                "opqTxStatus": {
                    "type": "string"
                },
                "stripePaymentExists": {
                    "type": "boolean"
                },
                "stripeToken": {
                    "type": "string"
                }
            }
        },
        "routes.stripeDataRes": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "chargeID": {
                    "type": "string"
                },
                "chargePaid": {
                    "type": "boolean"
                },
                "opqTxStatus": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "status of the request"
                },
                "stripePaymentExists": {
                    "type": "boolean"
                },
                "stripeToken": {
                    "type": "string"
                }
            }
        },
        "routes.updateMetadataObject": {
            "type": "object",
            "required": [
                "metadata",
                "metadataKey",
                "timestamp"
            ],
            "properties": {
                "metadata": {
                    "type": "string",
                    "example": "your (updated) account metadata"
                },
                "metadataKey": {
                    "type": "string",
                    "example": "a 64-char hex string created deterministically, will be a key for the metadata of one of your folders"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "routes.updateMetadataReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                },
                "updateMetadataObject": {
                    "type": "object",
                    "$ref": "#/definitions/routes.updateMetadataObject"
                }
            }
        },
        "routes.updateMetadataRes": {
            "type": "object",
            "required": [
                "expirationDate",
                "metadata",
                "metadataKey"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string",
                    "example": "your (updated) account metadata"
                },
                "metadataKey": {
                    "type": "string",
                    "example": "a 64-char hex string created deterministically, will be a key for the metadata of one of your folders"
                }
            }
        },
        "utils.PlanInfo": {
            "type": "object",
            "required": [
                "cost",
                "costInUSD",
                "maxFolders",
                "maxMetadataSizeInMB",
                "name",
                "storageInGB"
            ],
            "properties": {
                "cost": {
                    "type": "number"
                },
                "costInUSD": {
                    "type": "number"
                },
                "maxFolders": {
                    "type": "integer"
                },
                "maxMetadataSizeInMB": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "storageInGB": {
                    "type": "integer"
                }
            }
        },
        "utils.PlanResponseType": {
            "type": "object",
            "additionalProperties": {
                "type": "object",
                "required": [
                    "cost",
                    "costInUSD",
                    "maxFolders",
                    "maxMetadataSizeInMB",
                    "name",
                    "storageInGB"
                ],
                "properties": {
                    "cost": {
                        "type": "number"
                    },
                    "costInUSD": {
                        "type": "number"
                    },
                    "maxFolders": {
                        "type": "integer"
                    },
                    "maxMetadataSizeInMB": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "storageInGB": {
                        "type": "integer"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
