// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://opacity.io/terms-of-service",
        "contact": {
            "name": "Opacity Staff",
            "url": "https://telegram.me/opacitystorage"
        },
        "license": {
            "name": "OPACITY LIMITED CODE REVIEW LICENSE LICENSE.md"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/account-data": {
            "post": {
                "description": "check the payment status of an account\nrequestBody should be a stringified version of (values are just examples):\n{\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "check the payment status of an account",
                "parameters": [
                    {
                        "description": "account payment status check object",
                        "name": "getAccountDataReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.getAccountDataReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.accountUnpaidRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/accounts": {
            "post": {
                "description": "create an account\nrequestBody should be a stringified version of (values are just examples):\n{\n\"storageLimit\": 100,\n\"durationInMonths\": 12,\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "create an account",
                "parameters": [
                    {
                        "description": "account creation object",
                        "name": "accountCreateReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.accountCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.accountCreateRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "error encrypting private key: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/delete": {
            "post": {
                "description": "delete a file\nrequestBody should be a stringified version of (values are just examples):\n{\n\"fileID\": \"the handle of the file\",\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "delete a file",
                "parameters": [
                    {
                        "description": "file deletion object",
                        "name": "deleteFileReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.deleteFileReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.deleteFileRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/download": {
            "post": {
                "description": "download a file without cryptographic verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "download a file without cryptographic verification",
                "parameters": [
                    {
                        "description": "download object for non-signed requests",
                        "name": "routes.DownloadFileObj",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.DownloadFileObj"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.downloadFileRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "such data does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/init-upload": {
            "post": {
                "description": "start an upload\nrequestBody should be a stringified version of (values are just examples):\n{\n\"fileHandle\": \"a deterministically created file handle\",\n\"fileSizeInByte\": \"200000000000006\",\n\"endIndex\": 2\n}",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "start an upload",
                "parameters": [
                    {
                        "description": "an object to start a file upload",
                        "name": "InitFileUploadReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.InitFileUploadReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "signature did not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/metadata/create": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataKey\": \"a 64-char hex string created deterministically, will be a key for the metadata of one of your folders\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "create a new metadata",
                "parameters": [
                    {
                        "description": "object for endpoints that only need metadataKey and timestamp",
                        "name": "metadataKeyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.metadataKeyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.createMetadataRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice resonse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/metadata/delete": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataKey\": \"a 64-char hex string created deterministically, will be a key for the metadata of one of your folders\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "delete a metadata",
                "parameters": [
                    {
                        "description": "object for endpoints that only need metadataKey and timestamp",
                        "name": "metadataKeyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.metadataKeyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice resonse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/metadata/get": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataKey\": \"a 64-char hex string created deterministically, will be a key for the metadata of one of your folders\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve account metadata",
                "parameters": [
                    {
                        "description": "object for endpoints that only need metadataKey and timestamp",
                        "name": "metadataKeyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.metadataKeyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.getMetadataRes"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice resonse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no value found for that key, or account not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/metadata/history": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataKey\": \"a 64-char hex string created deterministically, will be a key for the metadata of one of your folders\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve metadata history",
                "parameters": [
                    {
                        "description": "object for endpoints that only need metadataKey and timestamp",
                        "name": "metadataKeyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.metadataKeyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.getMetadataHistoryRes"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice resonse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no value found for that key, or account not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/metadata/set": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataKey\": \"a 64-char hex string created deterministically, will be a key for the metadata of one of your folders\",\n\"metadata\": \"your (updated) account metadata\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update metadata",
                "parameters": [
                    {
                        "description": "update metadata object",
                        "name": "updateMetadataReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.updateMetadataReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.updateMetadataRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no value found for that key, or account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/renew": {
            "post": {
                "description": "check the renewal status\nrequestBody should be a stringified version of (values are just examples):\n{\n\"metadataKeys\": \"[\"someKey\", \"someOtherKey]\",\n\"fileHandles\": \"[\"someHandle\", \"someOtherHandle]\",\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "check the renewal status",
                "parameters": [
                    {
                        "description": "check renewal status object",
                        "name": "checkRenewalStatusReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.checkRenewalStatusReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/renew/invoice": {
            "post": {
                "description": "get an invoice to renew an account\nrequestBody should be a stringified version of (values are just examples):\n{\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "get an invoice to renew an account",
                "parameters": [
                    {
                        "description": "get renewal invoice object",
                        "name": "getRenewalAccountInvoiceReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.getRenewalAccountInvoiceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.getRenewalAccountInvoiceRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/stripe/create": {
            "post": {
                "description": "create a stripe payment\nrequestBody should be a stringified version of (values are just examples):\n{\n\"stripeToken\": \"tok_KPte7942xySKBKyrBu11yEpf\",\n\"timestamp\": 1659325302,\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "create a stripe payment",
                "parameters": [
                    {
                        "description": "stripe payment creation object",
                        "name": "createStripePaymentReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.createStripePaymentReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.stripeDataRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "account is already paid for",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/upgrade": {
            "post": {
                "description": "check the upgrade status\nrequestBody should be a stringified version of (values are just examples):\n{\n\"storageLimit\": 100,\n\"durationInMonths\": 12,\n\"metadataKeys\": \"[\"someKey\", \"someOtherKey]\",\n\"fileHandles\": \"[\"someHandle\", \"someOtherHandle]\",\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "check the upgrade status",
                "parameters": [
                    {
                        "description": "check upgrade status object",
                        "name": "checkUpgradeStatusReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.checkUpgradeStatusReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/upgrade/invoice": {
            "post": {
                "description": "get an invoice to upgrade an account\nrequestBody should be a stringified version of (values are just examples):\n{\n\"storageLimit\": 100,\n\"durationInMonths\": 12,\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "get an invoice to upgrade an account",
                "parameters": [
                    {
                        "description": "get upgrade invoice object",
                        "name": "getUpgradeAccountInvoiceReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.getUpgradeAccountInvoiceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.getUpgradeAccountInvoiceRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/upgradeV2": {
            "post": {
                "description": "check the upgradeV2 status\nrequestBody should be a stringified version of (values are just examples):\n{\n\"storageLimit\": 100,\n\"durationInMonths\": 12,\n\"metadataKeys\": \"[\"someKey\", \"someOtherKey]\",\n\"fileHandles\": \"[\"someHandle\", \"someOtherHandle]\",\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "check the upgradeV2 status",
                "parameters": [
                    {
                        "description": "check upgradeV2 status object",
                        "name": "checkUpgradeV2StatusReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.checkUpgradeV2StatusReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/upgradeV2/invoice": {
            "post": {
                "description": "get an invoice to upgradeV2 an account\nrequestBody should be a stringified version of (values are just examples):\n{\n\"storageLimit\": 100,\n\"durationInMonths\": 12,\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "get an invoice to upgradeV2 an account",
                "parameters": [
                    {
                        "description": "get upgradeV2 invoice object",
                        "name": "getUpgradeV2AccountInvoiceReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.getUpgradeV2AccountInvoiceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.getUpgradeV2AccountInvoiceRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/upload": {
            "post": {
                "description": "upload a chunk of a file. The first partIndex must be 1.\nrequestBody should be a stringified version of (values are just examples):\n{\n\"fileHandle\": \"a deterministically created file handle\",\n\"partIndex\": 1,\n}",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "upload a chunk of a file",
                "parameters": [
                    {
                        "description": "an object to upload a chunk of a file",
                        "name": "UploadFileReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.UploadFileReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/routes.accountCreateRes"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/upload-status": {
            "post": {
                "description": "check status of an upload\nrequestBody should be a stringified version of (values are just examples):\n{\n\"fileHandle\": \"a deterministically created file handle\",\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "check status of an upload",
                "parameters": [
                    {
                        "description": "an object to poll upload status",
                        "name": "UploadStatusReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.UploadStatusReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "signature did not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "file or account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/account/updateApiVersion": {
            "post": {
                "description": "update the account api version to v2\nrequestBody should be a stringified version of (values are just examples):\n{\n\"timestamp\": 1659325302\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "update the account api version to v2",
                "parameters": [
                    {
                        "description": "account object",
                        "name": "getAccountDataReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.getAccountDataReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/delete": {
            "post": {
                "description": "deletes files\nrequestBody should be a stringified version of:\n{\n\"fileIDs\": [],\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "deletes files",
                "parameters": [
                    {
                        "description": "file(s) deletion object",
                        "name": "deleteFilesReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.deleteFilesReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.deleteFilesRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/download/private": {
            "post": {
                "description": "download a file without cryptographic verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "download a file without cryptographic verification",
                "parameters": [
                    {
                        "description": "download object for non-signed requests",
                        "name": "routes.DownloadFileObj",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.DownloadFileObj"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.downloadFileRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "such data does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/download/public": {
            "post": {
                "description": "returns the URLs for a public file and it's thumbnail, if no thumbnail is present, return a default one",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "returns the URLs for a public file and it's thumbnail",
                "parameters": [
                    {
                        "description": "download object for non-signed requests",
                        "name": "routes.DownloadFileObj",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.DownloadFileObj"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.downloadPublicFileRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "such data does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/init-upload-public": {
            "post": {
                "description": "start a public upload.\nrequestBody should be a stringified version of (values are just examples):\n{\n\"fileHandle\": \"the file ID for which the public file should be created\",\n\"fileSizeInByte\": \"55600008877\",\n\"endIndex\": 2\n}",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "start a public upload",
                "parameters": [
                    {
                        "description": "an object to start a public file upload",
                        "name": "InitFileUploadReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.InitFileUploadReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "signature did not match / account does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/metadata/add": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataV2Key\": \"public key for the metadataV2 encoded to base64\",\n\"metadataV2Vertex\": \"the vertex to add to your account metadataV2 encoded to base64\",\n\"metadataV2Edges\": \"the edges to add to your account metadataV2 encoded to base64\",\n\"metadataV2Sig\": \"a signature encoded to base64 confirming the metadata change, the publickey will be a key for the metadataV2\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update metadataV2",
                "parameters": [
                    {
                        "description": "update metadataV2 object",
                        "name": "updateMetadataV2Req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.updateMetadataV2Req"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.updateMetadataV2Res"
                        }
                    },
                    "400": {
                        "description": "bad request, can't verify signature: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no value found for that key, or account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/metadata/add-multiple": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadatas\": [{\n\"metadataV2Key\": \"public key for the metadataV2 encoded to base64\",\n\"metadataV2Vertex\": \"the vertex to add to your account metadataV2 encoded to base64\",\n\"metadataV2Edges\": \"the edges to add to your account metadataV2 encoded to base64\",\n\"metadataV2Sig\": \"a signature encoded to base64 confirming the metadata change, the publickey will be a key for the metadataV2\",\n},\n{ ... }]\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update multiple metadataV2",
                "parameters": [
                    {
                        "description": "update metadataV2 objects",
                        "name": "updateMetadataMultipleV2Req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.updateMetadataMultipleV2Req"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.updateMetadataMultipleV2Res"
                        }
                    },
                    "400": {
                        "description": "bad request, can't verify signature: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/metadata/delete": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataV2Key\": \"public key for the metadataV2 encoded to base64\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "delete a metadataV2",
                "parameters": [
                    {
                        "description": "object for endpoints that only need metadataV2Key and timestamp",
                        "name": "metadataV2KeyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.metadataV2KeyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, incorrect key length",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice resonse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/metadata/delete-multiple": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataV2Keys\": [\"public key for the metadataV2 encoded to base64\", \"another public key for the metadataV2 encoded to base64\", \"...\"],\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "delete multiple metadataV2, if a key is not found, it won't be treated as an error",
                "parameters": [
                    {
                        "description": "object for endpoint that only needs an array of metadataV2Keys and timestamp",
                        "name": "metadataMultipleV2KeyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.metadataMultipleV2KeyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, incorrect key length",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice resonse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/metadata/get": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataV2Key\": \"public key for the metadataV2 encoded to base64\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve account metadataV2",
                "parameters": [
                    {
                        "description": "object for endpoints that only need metadataV2Key and timestamp",
                        "name": "metadataV2KeyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.metadataV2KeyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.getMetadataV2Res"
                        }
                    },
                    "400": {
                        "description": "bad request, incorrect key length",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice resonse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no value found for that key, or account not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/metadata/get-public": {
            "post": {
                "description": "requestBody should be a stringified version of (values are just examples):\n{\n\"metadataV2Key\": \"public key for the metadataV2 encoded to base64\",\n\"timestamp\": 1557346389\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve account metadataV2",
                "parameters": [
                    {
                        "description": "object for endpoints that only need metadataV2Key and timestamp",
                        "name": "metadataV2PublicKeyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.metadataV2PublicKeyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.getMetadataV2Res"
                        }
                    },
                    "400": {
                        "description": "bad request, incorrect key length",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "subscription expired, or the invoice resonse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no value found for that key, or account not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/public-share/:shortlink": {
            "get": {
                "description": "get the S3 URL for a publicly shared file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "get S3 url for a publicly shared file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "shortlink ID",
                        "name": "shortlink",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.PublicFileDownloadResp"
                        }
                    },
                    "404": {
                        "description": "file does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "there was an error parsing your request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/public-share/convert": {
            "post": {
                "description": "convert private file to a public shared one\nrequestBody should be a stringified version of:\n{\n\"fileHandle\": \"a deterministically created file handle\",\n\"fileSize\": 543534,\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "convert private file to a public shared one",
                "parameters": [
                    {
                        "description": "an object to do the conversion of a private file to a public one",
                        "name": "PrivateToPublicReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.PrivateToPublicReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "signature did not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "the data does not exist",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/public-share/revoke": {
            "post": {
                "description": "remove a public share entry, revoke the share\nrequestBody should be a stringified version of):\n{\n\"shortlink\": \"the shortlink of the completed file\",\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "revokes public share",
                "parameters": [
                    {
                        "description": "an object to do operations on a public share",
                        "name": "PublicShareOpsReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.PublicShareOpsReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to revoke public share",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "signature did not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "file does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "public file could not be deleted from databse or S3",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/public-share/shortlink": {
            "post": {
                "description": "this endpoint will created a new shortlink based on the fileHandle, a title and a description\nrequestBody should be a stringified version of:\n{\n\"fileId\": \"the ID of the file\",\n\"title\": \"the title of the file\",\n\"description\": \"a description of the file\",\n\"mimeType\": \"the file mimeType example: image/png\",\n\"fileExtension\": \"the file extension, example: png\"\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "creates a shortlink",
                "parameters": [
                    {
                        "description": "an object to create a shortlink for a public shared file",
                        "name": "CreateShortlinkReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.CreateShortlinkReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.CreateShortlinkResp"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "signature did not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "the data does not exist",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/public-share/views-count": {
            "post": {
                "description": "get the views count for a publicly shared file\nrequestBody should be a stringified version of:\n{\n\"shortlink\": \"the shortlink of the completed file\",\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "get views count",
                "parameters": [
                    {
                        "description": "an object to do operations on a public share",
                        "name": "PublicShareOpsReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.PublicShareOpsReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.viewsCountResp"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to get views count",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "signature did not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "public share or file does not exist",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/renew": {
            "post": {
                "description": "check the renewalV2 status\nrequestBody should be a stringified version of (values are just examples):\n{\n\"metadataKeys\": \"[\"someKey\", \"someOtherKey]\",\n\"fileHandles\": \"[\"someHandle\", \"someOtherHandle]\",\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "check the renewalV2 status",
                "parameters": [
                    {
                        "description": "check renewalV2 status object",
                        "name": "checkRenewalV2StatusReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.checkRenewalV2StatusReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/renew/invoice": {
            "post": {
                "description": "get an invoice to renew an account\nrequestBody should be a stringified version of (values are just examples):\n{\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "get an invoice to renew an account",
                "parameters": [
                    {
                        "description": "get renewalV2 invoice object",
                        "name": "getRenewalV2AccountInvoiceReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.getRenewalV2AccountInvoiceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.getRenewalV2AccountInvoiceRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/smart-contracts": {
            "get": {
                "description": "gets the smart contracts address and related info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "gets the smart contracts address",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.SmartContractResp"
                            }
                        }
                    },
                    "404": {
                        "description": "no account with that id: (with your accountID)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/upload-public": {
            "post": {
                "description": "upload a chunk of a file. The first partIndex must be 1. The storage for this file does not count\nrequestBody should be a stringified version of (values are just examples):\n{\n\"fileHandle\": \"a deterministically created file handle\",\n\"partIndex\": 1,\n}",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "upload a chunk of a file",
                "parameters": [
                    {
                        "description": "an object to upload a chunk of an unencrypted file (the storage for this file does no count)",
                        "name": "UploadFileReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.UploadFileReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "signature did not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "file or account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v2/upload-status-public": {
            "post": {
                "description": "check status of a public upload and creates a thumbnail in case the file is an image. If the mimeType is send, the API will not create the thumbnail\n\"jpg\" (or \"jpeg\"), \"png\", \"gif\", \"tif\" (or \"tiff\") and \"bmp\" are supported\nrequestBody should be a stringified version of (values are just examples):\n{\n\"fileHandle\": \"a deterministically created file handle\",\n\"mimeType\": \"the mime type of the file\",\n\"title\": \"file title\",\n\"description\": \"a description to be used as metatags value\"\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "check status of a public upload",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusRes"
                        }
                    },
                    "400": {
                        "description": "bad request, unable to parse request body: (with the error)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "signature did not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "file not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "some information about the internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/plans": {
            "get": {
                "description": "get the plans we sell",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "get the plans we sell",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.PlanResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Invoice": {
            "type": "object",
            "required": [
                "ethAddress"
            ],
            "properties": {
                "cost": {
                    "type": "number",
                    "example": 1.56
                },
                "ethAddress": {
                    "type": "string",
                    "maxLength": 42,
                    "minLength": 42,
                    "example": "a 42-char eth address with 0x prefix"
                }
            }
        },
        "routes.CreateShortlinkReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.CreateShortlinkResp": {
            "type": "object",
            "properties": {
                "short_id": {
                    "type": "string"
                }
            }
        },
        "routes.DownloadFileObj": {
            "type": "object",
            "required": [
                "fileID"
            ],
            "properties": {
                "fileID": {
                    "type": "string",
                    "example": "the handle of the file"
                }
            }
        },
        "routes.InitFileUploadReq": {
            "type": "object",
            "required": [
                "metadata",
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "metadata": {
                    "type": "string",
                    "example": "the metadata of the file you are about to upload, as an array of bytes"
                },
                "metadataAsFile": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.PlanResponse": {
            "type": "object",
            "properties": {
                "plans": {
                    "$ref": "#/definitions/utils.PlanResponseType"
                }
            }
        },
        "routes.PrivateToPublicReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.PublicFileDownloadResp": {
            "type": "object",
            "properties": {
                "s3_thumbnail_url": {
                    "type": "string"
                },
                "s3_url": {
                    "type": "string"
                }
            }
        },
        "routes.PublicShareOpsReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.SmartContractResp": {
            "type": "object",
            "properties": {
                "contracts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routes.SmartContractRespEntity"
                    }
                }
            }
        },
        "routes.SmartContractRespEntity": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "chainId": {
                    "type": "integer"
                },
                "network": {
                    "type": "string"
                }
            }
        },
        "routes.StatusRes": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "status of the request"
                }
            }
        },
        "routes.UploadFileReq": {
            "type": "object",
            "required": [
                "chunkData",
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "chunkData": {
                    "type": "string",
                    "example": "a binary string of the chunk data"
                },
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.UploadStatusReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.accountCreateReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.accountCreateRes": {
            "type": "object",
            "required": [
                "expirationDate"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "invoice": {
                    "$ref": "#/definitions/models.Invoice"
                }
            }
        },
        "routes.accountDataRes": {
            "type": "object",
            "required": [
                "account"
            ],
            "properties": {
                "account": {
                    "$ref": "#/definitions/routes.accountGetObj"
                },
                "error": {
                    "type": "string",
                    "example": "the error encountered while checking"
                },
                "paymentStatus": {
                    "type": "string",
                    "example": "paid"
                },
                "stripeData": {
                    "$ref": "#/definitions/routes.stripeDataObj"
                }
            }
        },
        "routes.accountGetObj": {
            "type": "object",
            "required": [
                "apiVersion",
                "ethAddress",
                "expirationDate",
                "monthsInSubscription",
                "storageLimit"
            ],
            "properties": {
                "accountID": {
                    "type": "string"
                },
                "apiVersion": {
                    "type": "integer"
                },
                "cost": {
                    "type": "number",
                    "example": 2
                },
                "createdAt": {
                    "type": "string"
                },
                "ethAddress": {
                    "description": "the eth address they will send payment to",
                    "type": "string",
                    "maxLength": 42,
                    "minLength": 42,
                    "example": "a 42-char eth address with 0x prefix"
                },
                "expirationDate": {
                    "type": "string"
                },
                "maxFolders": {
                    "type": "integer",
                    "example": 2000
                },
                "maxMetadataSizeInMB": {
                    "type": "integer",
                    "example": 200
                },
                "monthsInSubscription": {
                    "description": "number of months in their subscription",
                    "type": "integer",
                    "example": 12
                },
                "storageLimit": {
                    "description": "how much storage they are allowed, in GB",
                    "type": "integer",
                    "example": 100
                },
                "storageUsed": {
                    "description": "how much storage they have used, in GB",
                    "type": "number",
                    "example": 30
                },
                "totalFolders": {
                    "type": "integer",
                    "example": 2
                },
                "totalMetadataSizeInMB": {
                    "type": "number",
                    "example": 1.245765432
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "routes.accountUnpaidRes": {
            "type": "object",
            "required": [
                "account"
            ],
            "properties": {
                "account": {
                    "$ref": "#/definitions/routes.accountGetObj"
                },
                "error": {
                    "type": "string",
                    "example": "the error encountered while checking"
                },
                "invoice": {
                    "$ref": "#/definitions/models.Invoice"
                },
                "paymentStatus": {
                    "type": "string",
                    "example": "paid"
                },
                "stripeData": {
                    "$ref": "#/definitions/routes.stripeDataObj"
                }
            }
        },
        "routes.checkRenewalStatusReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.checkRenewalV2StatusReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.checkUpgradeStatusReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.checkUpgradeV2StatusReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.createMetadataRes": {
            "type": "object",
            "required": [
                "expirationDate"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                }
            }
        },
        "routes.createStripePaymentReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.deleteFileReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.deleteFileRes": {
            "type": "object"
        },
        "routes.deleteFilesReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.deleteFilesRes": {
            "type": "object",
            "properties": {
                "unsuccessfulDeletions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "routes.downloadFileRes": {
            "type": "object",
            "properties": {
                "fileDownloadUrl": {
                    "description": "Url should point to S3, thus client does not need to download it from this node.",
                    "type": "string",
                    "example": "a URL to use to download the file"
                }
            }
        },
        "routes.downloadPublicFileRes": {
            "type": "object",
            "properties": {
                "fileDownloadThumbnailUrl": {
                    "type": "string",
                    "example": "a URL to use to download the public file thumbnail"
                },
                "fileDownloadUrl": {
                    "type": "string",
                    "example": "a URL to use to download the public file"
                }
            }
        },
        "routes.getAccountDataReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.getMetadataHistoryRes": {
            "type": "object",
            "required": [
                "expirationDate",
                "metadata",
                "metadataHistory"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string",
                    "example": "your account metadata"
                },
                "metadataHistory": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "your account metadata"
                    ]
                }
            }
        },
        "routes.getMetadataRes": {
            "type": "object",
            "required": [
                "expirationDate",
                "metadata"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string",
                    "example": "your account metadata"
                }
            }
        },
        "routes.getMetadataV2Res": {
            "type": "object",
            "required": [
                "expirationDate",
                "metadataV2"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "metadataV2": {
                    "type": "string",
                    "example": "your account metadataV2"
                }
            }
        },
        "routes.getRenewalAccountInvoiceReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.getRenewalAccountInvoiceRes": {
            "type": "object",
            "properties": {
                "opctInvoice": {
                    "$ref": "#/definitions/models.Invoice"
                }
            }
        },
        "routes.getRenewalV2AccountInvoiceReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.getRenewalV2AccountInvoiceRes": {
            "type": "object",
            "properties": {
                "opctInvoice": {
                    "$ref": "#/definitions/models.Invoice"
                }
            }
        },
        "routes.getUpgradeAccountInvoiceReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.getUpgradeAccountInvoiceRes": {
            "type": "object",
            "properties": {
                "opctInvoice": {
                    "$ref": "#/definitions/models.Invoice"
                }
            }
        },
        "routes.getUpgradeV2AccountInvoiceReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.getUpgradeV2AccountInvoiceRes": {
            "type": "object",
            "properties": {
                "opctInvoice": {
                    "$ref": "#/definitions/models.Invoice"
                }
            }
        },
        "routes.metadataKeyReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.metadataMultipleV2KeyReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.metadataV2KeyReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.metadataV2PublicKeyReq": {
            "type": "object",
            "required": [
                "requestBody"
            ],
            "properties": {
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                }
            }
        },
        "routes.stripeDataObj": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "chargeID": {
                    "type": "string"
                },
                "chargePaid": {
                    "type": "boolean"
                },
                "opctTxStatus": {
                    "type": "string"
                },
                "stripePaymentExists": {
                    "type": "boolean"
                },
                "stripeToken": {
                    "type": "string"
                }
            }
        },
        "routes.stripeDataRes": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "chargeID": {
                    "type": "string"
                },
                "chargePaid": {
                    "type": "boolean"
                },
                "opctTxStatus": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "status of the request"
                },
                "stripePaymentExists": {
                    "type": "boolean"
                },
                "stripeToken": {
                    "type": "string"
                }
            }
        },
        "routes.updateMetadataMultipleV2Req": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.updateMetadataMultipleV2Res": {
            "type": "object",
            "required": [
                "expirationDate",
                "metadatas"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "failedMetadatas": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routes.updateMetadataV2ResBase"
                    }
                }
            }
        },
        "routes.updateMetadataReq": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.updateMetadataRes": {
            "type": "object",
            "required": [
                "expirationDate",
                "metadata",
                "metadataKey"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string",
                    "example": "your (updated) account metadata"
                },
                "metadataKey": {
                    "type": "string",
                    "example": "a 64-char hex string created deterministically, will be a key for the metadata of one of your folders"
                }
            }
        },
        "routes.updateMetadataV2Req": {
            "type": "object",
            "required": [
                "publicKey",
                "requestBody",
                "signature"
            ],
            "properties": {
                "publicKey": {
                    "type": "string",
                    "maxLength": 66,
                    "minLength": 66,
                    "example": "a 66-character public key"
                },
                "requestBody": {
                    "type": "string",
                    "example": "look at description for example"
                },
                "signature": {
                    "description": "signature without 0x prefix is broken into\nR: sig[0:63]\nS: sig[64:127]",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 128,
                    "example": "a 128 character string created when you signed the request with your private key or account handle"
                }
            }
        },
        "routes.updateMetadataV2Res": {
            "type": "object",
            "required": [
                "expirationDate",
                "metadataV2",
                "metadataV2Key"
            ],
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "metadataV2": {
                    "type": "string",
                    "example": "your (updated) account metadataV2"
                },
                "metadataV2Key": {
                    "type": "string",
                    "example": "public key for the metadataV2 encoded to base64url"
                }
            }
        },
        "routes.updateMetadataV2ResBase": {
            "type": "object",
            "required": [
                "metadataV2",
                "metadataV2Key"
            ],
            "properties": {
                "metadataV2": {
                    "type": "string",
                    "example": "your (updated) account metadataV2"
                },
                "metadataV2Key": {
                    "type": "string",
                    "example": "public key for the metadataV2 encoded to base64url"
                }
            }
        },
        "routes.viewsCountResp": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                }
            }
        },
        "utils.PlanInfo": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "number"
                },
                "costInUSD": {
                    "type": "number"
                },
                "maxFolders": {
                    "type": "integer"
                },
                "maxMetadataSizeInMB": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "storageInGB": {
                    "type": "integer"
                }
            }
        },
        "utils.PlanResponseType": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/utils.PlanInfo"
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Storage Node",
	Description: "Opacity backend for file storage.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
