version: "3"

services:
  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    ports:
      - 9090:9090
    volumes:
      - prometheus_data:/prometheus
    entrypoint: ./prometheus/entrypoint.sh ${ADMIN_USER} ${ADMIN_PASSWORD}
      # nginx will be listening on port 12321
      # must create /etc/nginx/sites-available/prometheus-proxy, symbolically link it in /etc/nginx/sites-enabled,
      # and restart nginx.  More info in README.
    networks:
      - promnet
    depends_on:
      - remote-storage-adapter
      - influxdb
      - node-exporter

  remote-storage-adapter:
    image: gavind/prometheus-remote-storage-adapter:1.0
    ports:
      - 9201:9201
    command: ['-influxdb-url=http://localhost:8086', '-influxdb.database=prometheus', '-influxdb.retention-policy=autogen']
    network_mode: 'host'
    depends_on:
      - influxdb

  influxdb:
    image: influxdb:1.3.5
    command: -config /etc/influxdb/influxdb.conf
    ports:
      - 8086:8086
    volumes:
      - ./influxdata:/var/lib/influxdb

#  pg_prometheus:
#    image: timescale/pg_prometheus:latest
#    command: -c synchronous_commit=OFF
#    container_name: pg_prometheus
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres"]
#      interval: 1s
#      timeout: 5s
#      retries: 10
#
#  prometheus_postgresql_adapter:
#    image: timescale/prometheus-postgresql-adapter:latest
#    ports:
#      - 9201:9201
#    depends_on:
#      - "pg_prometheus"
#    command: "-pg.host=pg_prometheus -pg.prometheus-log-samples -pg.password=PASSWORD"

  # Explore current machine metric for prometheus to scrape.
  node-exporter:
    image: prom/node-exporter
    ports:
      - 9100:9100
    networks:
      - promnet

# If we decide to turn on our own grafana dashboard
#  grafana:
#    image: grafana/grafana
#    environment:
#      - GF_SECURITY_ADMIN_PASSWORD=<your_password>
#      - GF_SERVER_HTTP_PORT=3100
#    depends_on:
#      - prometheus
#    ports:
#      - 3100:3100
#    volumes:
#      - grafana_data:/var/lib/grafana
#    networks:
#      - promnet

#  app:
#    build: "."
#    restart: "always"
#    ports:
#      - ${APP_PORT:-3000}:3000
#    env_file:
#      - ".env"
#    depends_on:
#      - "db"
#    volumes:
#      - ".:/go/src/github.com/opacity/storage-node"
#      - "./data/badger/prod:/var/lib/badger/prod"
#      - "./data/badger/test:/var/lib/badger/test"
#    working_dir: "/go/src/github.com/opacity/storage-node"
#    command: >
#      bash -c "
#        echo waiting for db...;
#        while ! nc -z db 3306;
#        do
#          sleep 0.5;
#          free -m;
#        done;
#        echo ${DEBUG}
#        go get github.com/codegangsta/gin
#        if [ -z ${DEBUG} ]; then
#          echo \"Starting Storage node in PROD mode\";
#          go build -o ./bin/storage-node && chmod +x ./bin/storage-node;
#          ./bin/storage-node;
#        else
#          echo \"Starting Storage node in DEV mode\";
#          gin run main.go
#        fi
#      "
#    networks:
#      - promnet
#      - dbnet

  db:
    container_name: mysql
    image: mysql:5.7
    restart: "always"
    command: --sql_mode=''
    # command: mysqld --sql_mode=''
    environment:
      - MYSQL_DATABASE=test
      - MYSQL_ROOT_USER=root
      - MYSQL_ROOT_PASSWORD=secret
    ports:
      - "33060:3306"
    volumes:
      - "./data/db/mysql:/var/lib/mysql"
    networks:
      - dbnet

# In order for each service to connect to each other, They need to be on the same
# network and use name like "app", "db", "prometheus" for reference. Ex: "db:3306", "app:3000".
networks:
  promnet:
    driver: bridge
  dbnet:
    driver: bridge

volumes:
  prometheus_data: {}
# grafana_data: {}
